import request = require('superagent');
import Q = require('q');
declare module Api {
    interface Query {
        select?: QuerySelects;
        filter?: QueryFilters;
        groupBy?: string[];
        timeframe?: Timeframe;
        interval?: string;
        timezone?: Timezone;
    }
    type Timeframe = string | AbsoluteTimeframe | RelativeTimeframe;
    type Timezone = string | number;
    interface AbsoluteTimeframe {
        start?: Date | string;
        end?: Date | string;
    }
    interface Period {
        minutes?: number;
        hours?: number;
        days?: number;
        weeks?: number;
        months?: number;
        quarters?: number;
        years?: number;
    }
    interface RelativeTimeframe {
        previous?: Period;
        current?: Period;
    }
    interface Metadata {
        groups?: string[];
        interval?: string;
        timezone?: string | number;
    }
    interface QuerySelect {
        [index: string]: string;
    }
    interface QuerySelects {
        [index: string]: string | Api.QuerySelect;
    }
    interface QueryFilter {
        [index: string]: string;
    }
    interface QueryFilters {
        [index: string]: Api.QueryFilter;
    }
    interface QueryResultInterval {
        start: string | Date;
        end: string | Date;
    }
    interface QueryResultItem {
        [index: string]: any;
        interval?: QueryResultInterval;
        results?: QueryResultItem[];
    }
    interface QueryResponse {
        metadata: Metadata;
        results: QueryResultItem[];
    }
    class QueryResults {
        metadata: Metadata;
        results: QueryResultItem[];
        cacheKey: string;
        constructor(response: QueryResponse, cacheKey?: string);
        selects(): string[];
        clone(): QueryResults;
    }
    type QueryResultsFactory = () => Q.IPromise<Api.QueryResults>;
    interface ClientDeferredQuery {
        deferred: Q.Deferred<any>;
        request: request.Request<any>;
    }
    class Client {
        _baseUrl: string;
        _projectId: string;
        _apiKey: string;
        constructor(baseUrl: string, projectId: string, apiKey: string);
        query(collection: string, query: Api.Query): ClientDeferredQuery;
        pushBatch(batches: any): Q.IPromise<any>;
        push(collection: string, newEvent: any): Q.IPromise<any>;
        private _send(requestToSend, resultsFactory);
        private _buildUrl(path);
    }
}
export = Api;
