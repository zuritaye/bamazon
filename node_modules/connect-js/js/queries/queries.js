var Filters = require('./filters');
var QueryBuilder = require('./query-builder');
var _ = require('underscore');
var Queries;
(function (Queries) {
    var ConnectQuery = (function () {
        function ConnectQuery(client, collection, selects, filters, groups, timeframe, interval, timezone, customQueryOptions) {
            this._client = client;
            this._collection = collection;
            this._selects = selects || {};
            this._filters = filters || [];
            this._groups = groups || [];
            this._timeframe = timeframe || null;
            this._interval = interval || null;
            this._timezone = timezone || null;
            this._customQueryOptions = customQueryOptions || {};
            this._runningRequests = new Array();
        }
        ConnectQuery.prototype.collection = function () {
            return this._collection;
        };
        ConnectQuery.prototype.select = function (selects) {
            for (var key in selects) {
                var select = selects[key];
                if (!_.isString(select) && Object.keys(select).length > 1)
                    throw new Error('You can only provide one aggregation function per select.');
            }
            return new ConnectQuery(this._client, this._collection, selects, this._filters, this._groups, this._timeframe, this._interval, this._timezone, this._customQueryOptions);
        };
        ConnectQuery.prototype.filter = function (filterSpecification) {
            var filters = _.chain(filterSpecification).map(Filters.queryFilterBuilder).flatten().value().concat(this._filters);
            filters = _.uniq(filters, function (filter) { return filter.field + '|' + filter.operator; });
            return new ConnectQuery(this._client, this._collection, this._selects, filters, this._groups, this._timeframe, this._interval, this._timezone, this._customQueryOptions);
        };
        ConnectQuery.prototype.groupBy = function (field) {
            var groups;
            if (typeof field === 'string') {
                groups = this._groups.concat([field]);
            }
            else {
                groups = this._groups.concat(field);
            }
            return new ConnectQuery(this._client, this._collection, this._selects, this._filters, groups, this._timeframe, this._interval, this._timezone, this._customQueryOptions);
        };
        ConnectQuery.prototype.timeframe = function (timeframe) {
            return new ConnectQuery(this._client, this._collection, this._selects, this._filters, this._groups, timeframe, this._interval, this._timezone, this._customQueryOptions);
        };
        ConnectQuery.prototype.interval = function (interval) {
            return new ConnectQuery(this._client, this._collection, this._selects, this._filters, this._groups, this._timeframe, interval, this._timezone, this._customQueryOptions);
        };
        ConnectQuery.prototype.timezone = function (timezone) {
            if (!this._timeframe && !this._interval)
                throw new Error('You can only set a timezone when a valid timeframe or interval has been set.');
            return new ConnectQuery(this._client, this._collection, this._selects, this._filters, this._groups, this._timeframe, this._interval, timezone, this._customQueryOptions);
        };
        ConnectQuery.prototype.custom = function (options) {
            var newOptions = {};
            for (var name in this._customQueryOptions)
                newOptions[name] = this._customQueryOptions[name];
            for (var name in options)
                newOptions[name] = options[name];
            return new ConnectQuery(this._client, this._collection, this._selects, this._filters, this._groups, this._timeframe, this._interval, this._timezone, newOptions);
        };
        ConnectQuery.prototype.execute = function () {
            var queryBuilder = new QueryBuilder(), apiQuery = queryBuilder.build(this._selects, this._filters, this._groups, this._timeframe, this._interval, this._timezone, this._customQueryOptions);
            var executeQuery = this._client.query(this._collection, apiQuery);
            this._addToRunningQueries(executeQuery);
            return executeQuery.deferred.promise;
        };
        ConnectQuery.prototype.abort = function () {
            var length = this._runningRequests.length;
            _.each(this._runningRequests, function (request) {
                request.request.abort();
                request.deferred.reject('request aborted');
            });
            this._runningRequests.splice(0, length);
        };
        ConnectQuery.prototype.isExecuting = function () {
            return this._runningRequests.length > 0;
        };
        ConnectQuery.prototype._addToRunningQueries = function (executeQuery) {
            var _this = this;
            this._runningRequests.push(executeQuery);
            var removeFromRunningQueries = function () {
                var finishedQueryIndex = _this._runningRequests.indexOf(executeQuery);
                if (finishedQueryIndex < 0)
                    return;
                _this._runningRequests.splice(finishedQueryIndex, 1);
            };
            executeQuery.deferred.promise.then(removeFromRunningQueries, removeFromRunningQueries);
        };
        return ConnectQuery;
    })();
    Queries.ConnectQuery = ConnectQuery;
})(Queries || (Queries = {}));
module.exports = Queries;
